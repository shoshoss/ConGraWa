<div class="w-full mx-auto">
<% @posts.each do |post| %>
<div id="post-id-<%= post.id %>" class="bg-white rounded-lg flex cursor-pointer hover:bg-gray-100">
  <!-- 1列目: アバターと音声再生 -->
  <div class="flex flex-col items-center justify-between p-4 bg-gray-100 hover:bg-gray-200">
    <img src="<%= post.user.avatar %>" alt="ユーザーアバター" class="rounded-full h-24 w-24"> <!-- アバター -->
    <div class="audio-controller">
  <% if post.audio.present? %>
    <audio id="audio-<%= post.id %>" preload="metadata">
      <source src="<%= post.audio_url %>" type="audio/webm">
      Your browser does not support the audio element.
    </audio>
    <div class="controls">
      <button class="toggle">Play</button>
      <button class="mute">Mute</button>
      <button class="loop">Loop</button>
      <input type="range" name="vol" min="0" max="1" step="0.01" value="0.8">
      <input type="range" name="seek" min="0" value="0" step="1">
      <div class="time">
        <span class="current-time">00:00</span> / 
        <span class="duration">00:00</span>
      </div>
    </div>
  <% end %>
</div>
  </div>
  <!-- 2列目: ユーザー情報、投稿、いいね、シェア -->
  <div class="flex-grow p-4">
    <%= link_to post_path(post), class: "hover:text-blue-500" do %>
      <div class="flex justify-between items-center mb-2">
        <div>
          <span class="text-lg font-semibold"><%= post.user.display_name %></span>
          <span class="text-sm text-gray-500">@<%= post.user.username_slug %></span>
          <span class="text-sm text-gray-500">･<%= l post.created_at, format: :long %></span>
        </div>
        <div>
          <%= link_to edit_post_path(post), id: "button-edit-#{post.id}", class: "text-blue-500 hover:text-blue-700" do %>
            <i class="fas fa-pencil-alt text-lg"></i>
          <% end %>
          <%= link_to post_path(post), method: :delete, data: { confirm: '本当に削除しますか？' }, class: "text-red-500 hover:text-red-700 ml-4" do %>
            <i class="fas fa-trash-alt text-lg"></i>
          <% end %>
        </div>
      </div>
      <p class="text-lg mb-2 leading-relaxed"><%= post.body %></p>
    <% end %>
    <div class="flex justify-between items-center">
      <span class="text-sm">01:46</span>
      <div>
        <button class="text-blue-500 hover:text-blue-700">
          <i class="fas fa-heart text-xl"></i>
        </button>
        <button class="text-blue-500 hover:text-blue-700 ml-2">
          <i class="fab fa-twitter text-xl"></i>
        </button>
      </div>
    </div>
  </div>
</div>
<% end %>
</div>

<script>

document.addEventListener('DOMContentLoaded', () => {
  const audioControllers = document.querySelectorAll('.audio-controller');

  audioControllers.forEach((audioController) => {
    const audio = audioController.querySelector('audio');
    audio.volume = 0.8;  // 初期音量を設定
    const toggleBtn = audioController.querySelector('.toggle');
    const muteBtn = audioController.querySelector('.mute');
    const loopBtn = audioController.querySelector('.loop');
    const volumeBar = audioController.querySelector('input[name="vol"]');
    const seekBar = audioController.querySelector('input[name="seek"]');
    const ctSpan = audioController.querySelector('.current-time');
    const durSpan = audioController.querySelector('.duration');

    toggleBtn.addEventListener('click', () => {
      if (audio.paused) {
        audio.play().then(() => {
          toggleBtn.textContent = 'Pause';
        }).catch(error => {
          console.error('Playback failed:', error);
        });
      } else {
        audio.pause();
        toggleBtn.textContent = 'Play';
      }
    });

    muteBtn.addEventListener('click', () => {
      audio.muted = !audio.muted;
      muteBtn.textContent = audio.muted ? 'Unmute' : 'Mute';
    });

    loopBtn.addEventListener('click', () => {
      audio.loop = !audio.loop;
      loopBtn.textContent = audio.loop ? 'Unloop' : 'Loop';
    });

    volumeBar.addEventListener('input', (e) => {
      audio.volume = e.currentTarget.value;
    });

    seekBar.addEventListener('input', (e) => {
      audio.currentTime = e.currentTarget.value;
    });

    audio.addEventListener('loadedmetadata', () => {
      durSpan.textContent = secToHMS(audio.duration);
      seekBar.max = audio.duration;
    });

    audio.addEventListener('timeupdate', () => {
      ctSpan.textContent = secToHMS(audio.currentTime);
      seekBar.value = audio.currentTime;
    });
  });

  function secToHMS(sec) {
    const h = Math.floor(sec / 3600);
    const m = Math.floor((sec % 3600) / 60);
    const s = Math.floor(sec % 60);
    return [h, m, s].map(v => v < 10 ? '0' + v : v).join(':');
  }
});

</script>
