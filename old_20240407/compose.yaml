version: "3.8"
services:
  # Postgresデータベースの設定
  db:
    image: postgres:16.2 # 使用するPostgresのイメージ
    volumes:
      - postgres_volume:/var/lib/postgresql/data # データベースのデータを永続化するためのボリュームマウント
    environment:
      POSTGRES_USER: postgres # データベースのユーザー名
      POSTGRES_PASSWORD: admin # データベースのパスワード
    ports:
      - "5433:5432" # ホストの5433ポートからコンテナの5432ポートへのマッピング

  # バックエンドアプリケーション（Rails）の設定
  backend:
    build:
      context: ./backend # Dockerfileの場所（コンテキスト）
      dockerfile: ../docker/rails/Dockerfile # Dockerfileへのパス
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'" # サーバー起動コマンド
    volumes:
      - ./backend:/backend # バックエンドのソースコードをコンテナにマウント
      - bundle_data:/usr/local/bundle # bundle installの結果を永続化
    environment:
      RAILS_ENV: development # Railsの実行環境
    ports:
      - "3001:3000" # ホストの3001ポートからコンテナの3000ポートへのマッピング
    depends_on:
      - db # dbサービスが起動してからbackendサービスを起動
    restart: always # コンテナが停止した場合は常に再起動

  # フロントエンドアプリケーション（React）の設定
  frontend:
    build:
      context: ./frontend # Dockerfileの場所（コンテキスト）
      dockerfile: ../docker/react/Dockerfile # Dockerfileへのパス
    volumes:
      - ./frontend:/usr/src/app # フロントエンドのソースコードをコンテナにマウント
      - node_modules:/usr/src/app/node_modules # node_modulesを永続化
    command: npm start # アプリケーションの起動コマンド
    environment:
      NODE_ENV: development # Node.jsの実行環境
    ports:
      - "3002:3000" # ホストの3002ポートからコンテナの3000ポートへのマッピング
    restart: always # コンテナが停止した場合は常に再起動

volumes:
  bundle_data:
  node_modules:
  postgres_volume:
  #   external: true # 外部で定義されたボリュームを使用する場合はコメントを外す
